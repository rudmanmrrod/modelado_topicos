# -*- coding: utf-8 -*-
"""
Sistema de modelado de Tópicos v1.4

Copyleft (@) 2017 CENDITEL nodo Mérida - https://planificacion.cenditel.gob.ve/trac/wiki/ModeladoTopicos_2017
"""
## @package carga_archivos.views
#
# Vistas de la aplicación de carga de archivos
# @author Generated by 'django-admin startproject' using Django 1.11.
# @author Rodrigo Boet (rboet at cenditel.gob.ve)
# @author <a href='http://www.cenditel.gob.ve'>Centro Nacional de Desarrollo e Investigación en Tecnologías Libres
# (CENDITEL) nodo Mérida - Venezuela</a>
# @copyright <a href='https://www.gnu.org/licenses/gpl-3.0.en.html'>GNU Public License versión 3 (GPLv3)</a>
# @version 1.4
from __future__ import unicode_literals

import shutil

from django.views.generic import (
    FormView, TemplateView, CreateView, ListView,
    DeleteView, UpdateView
    )
from django.core.urlresolvers import reverse_lazy
from django.contrib.messages.views import SuccessMessageMixin
from django.contrib.auth.mixins import LoginRequiredMixin
from django.core.files.storage import FileSystemStorage
from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger
from django.shortcuts import redirect
from django.contrib import messages
from .models import Carga
from .forms import CargaForm, CargaUpdateForm
from modelado_topicos.settings import PROCESAMIENTO_PATH

import os

class CreateCargaArchivos(SuccessMessageMixin, LoginRequiredMixin, CreateView ):
    """!
    Clase que gestiona la creación y carga de archivos

    @author Rodrigo Boet (rboet at cenditel.gob.ve)
    @copyright <a href='http://www.gnu.org/licenses/gpl-2.0.html'>GNU Public License versión 2 (GPLv2)</a>
    @date 25-08-2017
    @version 1.0.0
    """
    model = Carga
    form_class = CargaForm
    template_name = "carga_archivos.create.html"
    success_message = "Se cargaron los archivos con éxito"
    success_url = reverse_lazy('carga_archivos_list')
    
    def form_valid(self,form):
        """!
        Metodo que al que accede si el formulario es válido
    
        @author Rodrigo Boet (rboet at cenditel.gob.ve)
        @copyright GNU/GPLv2
        @date 28-03-2017
        @param self <b>{object}</b> Objeto que instancia la clase
        @param form <b>{object}</b> Objeto que contiene el formulario de registro
        @return Retorna el formulario validado
        """
        files = self.request.FILES.getlist('corpus')
        
        self.object = form.save(commit=False)
        self.object.carga_dir = form.cleaned_data['carga_dir']
        self.object.carga_dir = self.object.carga_dir.replace(' ','')
        self.object.user = self.request.user
        self.object.save()
        
        dir_name = PROCESAMIENTO_PATH+"/"+self.object.carga_dir+"/orig"
        if not os.path.exists(dir_name):
            os.makedirs(dir_name)
        
        fs = FileSystemStorage()
        for f in files:
            fs.save(dir_name+"/"+f.name, f)
            #default_storage.save(PROCESAMIENTO_PATH+"/prueba/", ContentFile(f.read()))
        
        
        return super(CreateCargaArchivos, self).form_valid(form)
    
class ListCargaArchivos(LoginRequiredMixin,ListView):
    """!
    Clase que gestiona la lista de los archivos cargados

    @author Rodrigo Boet (rboet at cenditel.gob.ve)
    @copyright <a href='http://www.gnu.org/licenses/gpl-2.0.html'>GNU Public License versión 2 (GPLv2)</a>
    @date 05-09-2017
    @version 1.0.0
    """
    model = Carga
    template_name = "carga_archivos.list.html"
    paginate_by = 5
    
    def get_context_data(self, **kwargs):
        """!
        Metodo para cargar/obtener valores en el contexto de la vista
    
        @author Rodrigo Boet (rboet at cenditel.gob.ve)
        @copyright GNU/GPLv2
        @date 28-03-2017
        @param self <b>{object}</b> Objeto que instancia la clase
        @param kwargs <b>{object}</b> Objeto que contiene los datos de contexto
        @return Retorna los datos de contexto
        """
        context = super(ListCargaArchivos, self).get_context_data(**kwargs)
        objetos = Carga.objects.filter(user_id=self.request.user.id).all()
        for carga in objetos:
            carga.directorios = os.listdir(PROCESAMIENTO_PATH+"/"+carga.carga_dir+"/orig")
        context['object_list'] = objetos
        ## Implementación del paginador
        paginator = Paginator(context['object_list'], self.paginate_by)
        page = self.request.GET.get('page')
        try:
            kwargs['page_obj'] = paginator.page(page)
        except PageNotAnInteger:
            kwargs['page_obj'] = paginator.page(1)
        except EmptyPage:
            kwargs['page_obj'] = paginator.page(paginator.num_pages)
        return context
        
        
class UpdateCargaArchivos(SuccessMessageMixin, LoginRequiredMixin, UpdateView ):
    """!
    Clase que gestiona la creación y carga de archivos

    @author Rodrigo Boet (rboet at cenditel.gob.ve)
    @copyright <a href='http://www.gnu.org/licenses/gpl-2.0.html'>GNU Public License versión 2 (GPLv2)</a>
    @date 05-09-2017
    @version 1.0.0
    """
    model = Carga
    form_class = CargaUpdateForm
    template_name = "carga_archivos.update.html"
    success_message = "Se actualizaron los archivos con éxito"
    success_url = reverse_lazy('carga_archivos_list')
    
    def form_valid(self,form):
        """!
        Metodo que al que accede si el formulario es válido
    
        @author Rodrigo Boet (rboet at cenditel.gob.ve)
        @copyright GNU/GPLv2
        @date 28-03-2017
        @param self <b>{object}</b> Objeto que instancia la clase
        @param form <b>{object}</b> Objeto que contiene el formulario de registro
        @return Retorna el formulario validado
        """
        files = self.request.FILES.getlist('corpus')        
        
        dir_name = PROCESAMIENTO_PATH+"/"+self.object.carga_dir+"/orig"
        
        fs = FileSystemStorage()
        for f in files:
            fs.save(dir_name+"/"+f.name, f)        
        
        return super(UpdateCargaArchivos, self).form_valid(form)
    
class DeleteCargaArchivos(LoginRequiredMixin, DeleteView):
    model = Carga
    template_name = "carga_archivos.delete.html"
    success_url = reverse_lazy('carga_archivos_list')
    
    def post(self, request, pk):
        """!
        Metodo que sobreescribe la acción por POST
    
        @author Rodrigo Boet (rboet at cenditel.gob.ve)
        @copyright GNU/GPLv2
        @date 20-02-2017
        @param self <b>{object}</b> Objeto que instancia la clase
        @param request <b>{object}</b> Objeto que contiene la petición
        @param pk <b>{int}</b> Recibe el id para filtrar
        @return Retorna los datos de contexto
        """
        carga = Carga.objects.filter(id=int(pk))
        if carga:
            carga = carga.get()
            shutil.rmtree(PROCESAMIENTO_PATH+"/"+carga.carga_dir)
            carga.delete()
            messages.add_message(request, messages.INFO, "Se eliminaron los archivos con éxito")
        return redirect(reverse_lazy('carga_archivos_list'))